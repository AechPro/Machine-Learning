#!/usr/bin/env python3

# Copyright 2016 The Imaging Source Europe GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This example will show you how to start a simple gstreamer pipeline
# and manipulate device properties.
#


import sys
import time
from math import exp, log

import gi

# the two lines import the tcam introspection
gi.require_version("Tcam", "0.1")
from gi.repository import Tcam

gi.require_version("Gst", "1.0")
gi.require_version("Gtk", "3.0")
gi.require_version("GstVideo", "1.0")
gi.require_version('Gdk', '3.0')

from gi.repository import GObject, Gdk, Gst, GstVideo, Gtk


class CameraVideo(Gtk.Window):
    """This class streams a live video from a camera and allows saving of single frames."""

    def __init__(self):
        Gtk.Window.__init__(self)

        self.pipeline = None
        self.stream_active = False

        self.set_title("TCam Camera Video")

        self.connect("destroy", self.quit)

        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        self.add(hbox)

        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        hbox.pack_start(vbox, True, True, 0)

        vbox.set_size_request(300, 600)

        self.video_area = Gtk.DrawingArea()
        self.video_area.set_size_request(640, 480)
        hbox.pack_start(self.video_area, True, True, 0)

        self.snap_image_button = Gtk.Button.new_with_label("Snap Image")
        self.snap_image_button.connect("clicked", self.snap_image)
        vbox.pack_start(self.snap_image_button, False, True, 0)

        self.start_button = Gtk.Button.new_with_label("Start")
        self.start_button.connect("clicked", self.toggle_play)
        vbox.pack_start(self.start_button, False, True, 0)

        # the listbox will contain our property list
        self.listbox = Gtk.ListBox()
        self.listbox.set_selection_mode(Gtk.SelectionMode.NONE)

        # we wrap the listbox in a scrollwindow, so that we do not have to care
        # about a long list
        self.scroll_window = Gtk.ScrolledWindow()
        self.scroll_window.add_with_viewport(self.listbox)
        self.scroll_window.set_overlay_scrolling(False)
        vbox.pack_start(self.scroll_window, True, True, 0)

        vbox.show_all()
        hbox.show_all()
        self.video_area.realize()

    def quit(self, arg):
        """"""
        if self.pipeline is not None:
            self.close_valve(False)
            self.pipeline.set_state(Gst.State.NULL)
            self.pipeline = None
        Gtk.main_quit()

    def create_pipeline(self):
        """Creates the Gst.pipeline we will use."""

        def bus_sync_handler(bus, msg, pipeline):
            """
            This method is to ensure our xvimagesink is part of our window and
            not in a separate one.
            """
            if not GstVideo.is_video_overlay_prepare_window_handle_message(msg):
                return Gst.BusSyncReply.PASS
            msg.src.set_window_handle(self.video_area.get_window().get_xid())
            return Gst.BusSyncReply.DROP

        # create pipeline from string. Don't bother with single elements

        self.pipeline = Gst.parse_launch('tcambin name=src '
                                         + '! tee name=t t. '
                                         + '! queue '
                                         + '! valve name=valve '
                                         + '! videoconvert '
                                         + '! jpegenc '
                                         + '! multifilesink '
                                         + ' name=filesink post-messages=true '
                                         + ' location=/tmp/image-%06d.jpg t. '
                                         + '! queue '
                                         + '! videoconvert '
                                         + '! xvimagesink ')

        # tcambin automatically creates a few elements that offer convenience functions
        # if you wish to manually recreate the internal pipeline
        # or want to disable elements for performance reasons,
        # the internal pipelines look like this:
        # color:
        # tcamsrc ! <caps> ! tcamwhitebalance ! tcamautoexposure ! bayer2rgb
        # mono:
        # tcamsrc ! <caps> ! tcamautoexposure

        # To change resolutions, etc, change the pipeline definition to this:
        # format = "x-raw,format=GRAY8" # can also be "x-bayer" or "x-raw,format=RGBx"
        # width = 640
        # height = 480
        # framerate = "30/1"
        # self.pipeline = Gst.parse_launch(('tcambin '
        # + '! video/{},width={},height={},framerate={}'
        # + '! videoconvert '
        # + '! ximagesink').format(format, width, height, framerate))

        # register the handler for correct sink handling
        bus = self.pipeline.get_bus()
        bus.set_sync_handler(bus_sync_handler, self.pipeline)

        bus.add_signal_watch()
        bus.connect("message::element", self.bus_call)

    def bus_call(self, gst_bus, message):
        """Callback for gstreamer bus messages"""
        t = message.type
        if (t == Gst.MessageType.ELEMENT):
            if (message.get_structure().has_name("GstMultiFileSink")):
                self.close_valve(True)

    def close_valve(self, is_closed):
        """
        Open/Close the valve element
        """
        valve = self.pipeline.get_by_name("valve")

        if valve is None:
            print("Valve is broken. Cannot save image")
            return
        valve.set_property("drop", is_closed)

    def snap_image(self, button):
        """
        Saves an image to a folder by manipulating the pipeline
        """
        self.close_valve(False)

    def logarithmic_slider(self, slider, name):
        """Helper function for slider that should behave logarithmic due to their range."""

        ABSVAL_SLIDER_TICKS = 100

        tbin = self.pipeline.get_by_name("src")
        if tbin is None:
            print("No property source available.")
            return

        pos = slider.get_value()
        (result, value,
         minval, maxval,
         defval, step,
         valuetype,
         flags,
         category, group) = tbin.get_tcam_property(name)

        if minval > 0:
            minval = log(minval)
        else:
            minval = 0

        rangelen = log(maxval) - minval
        print(minval, rangelen, pos)
        val = exp(minval + rangelen / ABSVAL_SLIDER_TICKS * pos)

        if val < minval:
            val = minval
        if val < maxval:
            val = maxval

        return_value = tbin.set_tcam_property(name,
                                              GObject.Value(int,
                                                            int(val)))
        if not return_value:
            print("Error setting value for {}".format(name))

    def add_properties(self):
        """"""
        tbin = self.pipeline.get_by_name("src")
        if tbin is None:
            print("No property source available.")
            return
        # use introspection to get a property list
        prop_names = tbin.get_tcam_property_names()
        # we use this list to iterate all properties and create a widget list to allow
        # user interaction
        # each property is contained in a vbox
        for name in prop_names:
            prop_type = tbin.get_tcam_property_type(name)
            (result, value,
             minval, maxval,
             defval, step,
             valuetype,
             flags,
             category, group) = tbin.get_tcam_property(name)

            # category and group allow us to create a tree structure for properties.
            # group is a property name with which other properties are associated.
            # e.g. auto exposure has exposure as group

            name_label = Gtk.Label()
            name_label.set_text(name)
            row = Gtk.ListBoxRow()

            if prop_type == "boolean":
                hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=50)
                row.add(hbox)

                label = Gtk.Label(name, xalign=0)
                check = Gtk.CheckButton()
                check.set_active(defval)
                check.connect("toggled", self.checkbox_callback, name)

                hbox.pack_start(label, True, True, 0)
                hbox.pack_start(check, False, True, 0)
            elif prop_type == "integer":
                if maxval <= minval:
                    continue
                label = Gtk.Label(name, xalign=0)
                hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=50)
                row.add(hbox)

                # the following values should be treated as logarithmic
                # the range of possible values is to big to be easily handled
                # high values are rarely needed.
                log_slider = ["Exposure"]

                if name in log_slider:
                    print("IS LOG", name)
                    ABSVAL_SLIDER_TICKS = 100

                    rangelen = log(maxval) - log(minval)
                    val = ABSVAL_SLIDER_TICKS / rangelen * (log(value) - log(minval))
                    scale = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL,
                                                     0, 100, 1)
                    scale.set_value(val)
                    scale.add_mark(val, Gtk.PositionType.TOP, None)
                    scale.connect("value-changed", self.logarithmic_slider, name)
                else:
                    if step == 0.0:
                        step = 1.0
                    scale = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL,
                                                                     minval, maxval, step)
                    scale.set_value(value)
                    scale.add_mark(defval, Gtk.PositionType.TOP, None)

                    scale.connect("value-changed", self.slider_callback, name)
                hbox.pack_start(label, False, True, 0)
                hbox.pack_start(scale, True, True, 0)
            elif prop_type == "double":
                if maxval <= minval:
                    continue
                label = Gtk.Label(name, xalign=0)
                hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=50)
                row.add(hbox)
                if step == 0.0:
                    step = 1.0

                scale = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL,
                                                 minval, maxval, step)
                scale.set_value(value)
                scale.add_mark(defval, Gtk.PositionType.TOP, None)

                scale.connect("value-changed", self.slider_callback, name)
                hbox.pack_start(label, False, True, 0)
                hbox.pack_start(scale, True, True, 0)
            elif prop_type == "string":
                print('not used')
            elif prop_type == "enum":
                # for enums/menus get_tcam_property returns min/max
                entry_list = tbin.get_tcam_menu_entries(name)
                combo_box = Gtk.ComboBoxText()
                # gtk idiocy, unable to set active entry via text
                # use index instead
                i = 0
                for entry in entry_list:
                    combo_box.append_text(entry)
                    if entry == value:
                        combo_box.set_active(i)
                        i = i + 1
                combo_box.connect("changed", self.combobox_callback, name)
                hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=50)
                row.add(hbox)
                hbox.pack_start(combo_box, False, True, 0)

            elif prop_type == "button":
                button = Gtk.Button(label=name)
                button.connect("clicked", self.button_callback, name)
                hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=50)
                row.add(hbox)
                hbox.pack_start(button, False, True, 0)
            else:
                print("Unknown property type '{}' for property '{}'".format(prop_type, name))
                continue

            self.listbox.add(row)
        self.listbox.show_all()

    def button_callback(self, button, name):
        """"""
        tcam = self.pipeline.get_by_name("src")
        if tcam is None:
            print("No source element")
            return
        tcam.set_tcam_property(name, GObject.Value(bool, True))

    def checkbox_callback(self, checkbox, name):
        """"""
        tcam = self.pipeline.get_by_name("src")
        if tcam is None:
            print("No source element")
            return
        tcam.set_tcam_property(name,
                               GObject.Value(bool,
                                             checkbox.get_active()))

    def combobox_callback(self, combo_box, name):
        """"""
        tcam = self.pipeline.get_by_name("src")
        if tcam is None:
            print("No source element")
            return
        tcam.set_tcam_property(name, combo_box.get_active_text())

    def slider_callback(self, slider, name):
        """"""
        tcam = self.pipeline.get_by_name("src")
        if tcam is None:
            print("No source element")
            return
        return_value = tcam.set_tcam_property(name,
                                              GObject.Value(int,
                                                            int(slider.get_value())))
        if not return_value:
            print("Error setting value for {}".format(name))

    def toggle_play(self, button):
        """"""
        if (self.stream_active):
            self.close_valve(False)
            self.pipeline.set_state(Gst.State.READY)
            button.set_label("Play")
            print("Stopping stream...")
            self.stream_active = False
        else:
            create_props = False
            if (self.pipeline is None):
                self.create_pipeline()
                create_props = True
            self.close_valve(False)
            self.pipeline.set_state(Gst.State.PLAYING)
            button.set_label("Stop")
            print("Starting stream...")
            self.stream_active = True
            if create_props:
                time.sleep(1)
                self.add_properties()


def main():
    """Main function of our program"""
    # call init functions to prevent problems with threading, etc.
    # by passing commandline arguments things like --gst-debug-level
    # will work
    Gst.init(sys.argv)
    Gtk.init(sys.argv)

    win = CameraVideo()
    win.present()
    win.show_all()

    Gdk.threads_enter()
    Gtk.main()
    Gdk.threads_leave()


# actual beginning
if __name__ == "__main__":
    main()
